// <auto-generated />
using System;
using DAL.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.18");

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.ActiveItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VisitorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VisitorId");

                    b.ToTable("ActiveItems");
                });

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Flat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.LibraryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("LibraryInfos");
                });

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.SeasonTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SeasonTickets");
                });

            modelBuilder.Entity("DAL.Entities.PersonsEntities.Author", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BookID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Rate")
                        .HasColumnType("REAL");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("BookID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DAL.Entities.PersonsEntities.Publisher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("DAL.Entities.PersonsEntities.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SeasonTicketId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.PublicationItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublisherID")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("VisitorId")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PublisherID");

                    b.HasIndex("VisitorId");

                    b.ToTable("PublicationItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PublicationItem");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Review", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PublicationItemID")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VisitorID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PublicationItemID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PublicationItemID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PublicationItemID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Book", b =>
                {
                    b.HasBaseType("DAL.Entities.PublicationEnteties.PublicationItem");

                    b.Property<int>("Genre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Book_ImagePath");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Journal", b =>
                {
                    b.HasBaseType("DAL.Entities.PublicationEnteties.PublicationItem");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Journal");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Ebook", b =>
                {
                    b.HasBaseType("DAL.Entities.PublicationEnteties.Book");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Ebook");
                });

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.ActiveItem", b =>
                {
                    b.HasOne("DAL.Entities.PersonsEntities.Visitor", null)
                        .WithMany("ActiveItems")
                        .HasForeignKey("VisitorId");
                });

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.Contact", b =>
                {
                    b.HasOne("DAL.Entities.AuxiliaryEntities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DAL.Entities.AuxiliaryEntities.LibraryInfo", b =>
                {
                    b.HasOne("DAL.Entities.AuxiliaryEntities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DAL.Entities.PersonsEntities.Author", b =>
                {
                    b.HasOne("DAL.Entities.PublicationEnteties.Book", null)
                        .WithMany("Author")
                        .HasForeignKey("BookID");
                });

            modelBuilder.Entity("DAL.Entities.PersonsEntities.Visitor", b =>
                {
                    b.HasOne("DAL.Entities.AuxiliaryEntities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.PublicationItem", b =>
                {
                    b.HasOne("DAL.Entities.PersonsEntities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.PersonsEntities.Visitor", null)
                        .WithMany("PublicationItems")
                        .HasForeignKey("VisitorId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Review", b =>
                {
                    b.HasOne("DAL.Entities.PublicationEnteties.PublicationItem", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PublicationItemID");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Tag", b =>
                {
                    b.HasOne("DAL.Entities.PublicationEnteties.PublicationItem", null)
                        .WithMany("Tags")
                        .HasForeignKey("PublicationItemID");
                });

            modelBuilder.Entity("DAL.Entities.PersonsEntities.Visitor", b =>
                {
                    b.Navigation("ActiveItems");

                    b.Navigation("PublicationItems");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.PublicationItem", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DAL.Entities.PublicationEnteties.Book", b =>
                {
                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
